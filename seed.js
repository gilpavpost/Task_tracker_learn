const pool = require('./config/db');
const bcrypt = require('bcryptjs');
const { faker } = require('@faker-js/faker');

const seedDatabase = async () => {
  try {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –º–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');

    // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã (–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
    await pool.query('DELETE FROM task_time_logs');
    await pool.query('DELETE FROM task_assignees');
    await pool.query('DELETE FROM tasks');
    await pool.query('DELETE FROM projects');
    await pool.query('DELETE FROM users');

    // 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (10+)
    const hashedPassword = await bcrypt.hash('password123', 10);
    const roles = ['admin', 'user', 'manager'];
    const users = [
      { username: 'admin', email: 'admin@example.com', password: hashedPassword, role: 'admin' },
      { username: 'john_ceo', email: 'john.ceo@company.com', password: hashedPassword, role: 'manager' },
      { username: 'jane_hr', email: 'jane.hr@company.com', password: hashedPassword, role: 'manager' },
      { username: 'mike_dev', email: 'mike.dev@company.com', password: hashedPassword, role: 'user' },
      { username: 'sarah_pm', email: 'sarah.pm@company.com', password: hashedPassword, role: 'manager' },
      { username: 'alex_designer', email: 'alex.designer@company.com', password: hashedPassword, role: 'user' },
      { username: 'olga_tester', email: 'olga.tester@company.com', password: hashedPassword, role: 'user' },
      { username: 'ivan_dev', email: 'ivan.dev@company.com', password: hashedPassword, role: 'user' },
      { username: 'lisa_marketing', email: 'lisa.marketing@company.com', password: hashedPassword, role: 'user' },
      { username: 'peter_support', email: 'peter.support@company.com', password: hashedPassword, role: 'user' },
      { username: 'nina_finance', email: 'nina.finance@company.com', password: hashedPassword, role: 'user' }
    ];
    console.log('–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    for (const user of users) {
      await pool.query(
        'INSERT INTO users (username, email, password, role) VALUES (?, ?, ?, ?)',
        [user.username, user.email, user.password, user.role]
      );
    }
    const [userRows] = await pool.query('SELECT id, username FROM users');
    const userIds = userRows.map(row => row.id);

    // 2. –ü—Ä–æ–µ–∫—Ç—ã (5-7)
    const projects = [
      { name: 'TaskTracker Core', description: 'Backend –∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞', created_by: userIds[1] },
      { name: 'TaskTracker Frontend', description: 'React SPA', created_by: userIds[3] },
      { name: 'HR Automation', description: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è HR-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤', created_by: userIds[2] },
      { name: 'Mobile App', description: '–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤', created_by: userIds[4] },
      { name: 'Marketing Website', description: '–ü—Ä–æ–º–æ-—Å–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏', created_by: userIds[8] },
      { name: 'Support Portal', description: '–ü–æ—Ä—Ç–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤', created_by: userIds[9] }
    ];
    console.log('–î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã...');
    for (const project of projects) {
      await pool.query(
        'INSERT INTO projects (name, description, created_by) VALUES (?, ?, ?)',
        [project.name, project.description, project.created_by]
      );
    }
    const [projectRows] = await pool.query('SELECT id FROM projects');
    const projectIds = projectRows.map(row => row.id);

    // 3. –ó–∞–¥–∞—á–∏ (20+), —Ä–∞–∑–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã, estimated_hours, –º–∞—Å—Å–∏–≤—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    const statuses = ['todo', 'in_progress', 'done', 'frozen'];
    const priorities = ['low', 'medium', 'high'];
    const tasks = [];
    for (let i = 0; i < 22; i++) {
      const project_id = faker.random.arrayElement(projectIds);
      const created_by = faker.random.arrayElement(userIds);
      const status = faker.random.arrayElement(statuses);
      const priority = faker.random.arrayElement(priorities);
      const estimated_hours = faker.random.number({ min: 4, max: 40 });
      const due_date = faker.date.between('2024-03-01', '2024-04-30');
      const title = faker.company.bs();
      const description = faker.lorem.sentence();
      tasks.push({
        title,
        description,
        project_id,
        created_by,
        priority,
        status,
        due_date: due_date.toISOString().slice(0, 10),
        estimated_hours
      });
    }
    console.log('–î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏...');
    for (const task of tasks) {
      await pool.query(
        'INSERT INTO tasks (title, description, project_id, created_by, priority, status, due_date, estimated_hours) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
        [task.title, task.description, task.project_id, task.created_by, task.priority, task.status, task.due_date, task.estimated_hours]
      );
    }
    const [taskRows] = await pool.query('SELECT id FROM tasks');
    const taskIds = taskRows.map(row => row.id);

    // 4. –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π (2-4 –Ω–∞ –∑–∞–¥–∞—á—É)
    console.log('–ù–∞–∑–Ω–∞—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∑–∞–¥–∞—á...');
    for (const taskId of taskIds) {
      const assignees = faker.helpers.shuffle(userIds).slice(0, faker.random.number({ min: 2, max: 4 }));
      for (const userId of assignees) {
        await pool.query('INSERT INTO task_assignees (task_id, user_id) VALUES (?, ?)', [taskId, userId]);
      }
    }

    // 5. –õ–æ–≥–∏ –≤—Ä–µ–º–µ–Ω–∏ (task_time_logs) ‚Äî –¥–ª—è —á–∞—Å—Ç–∏ –∑–∞–¥–∞—á, —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –¥–∞—Ç—ã, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–æ–≥–∏ –≤—Ä–µ–º–µ–Ω–∏...');
    for (const taskId of taskIds.slice(0, 15)) { // —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞—Å—Ç–∏ –∑–∞–¥–∞—á
      const days = faker.random.number({ min: 2, max: 6 });
      const assignees = (await pool.query('SELECT user_id FROM task_assignees WHERE task_id = ?', [taskId]))[0].map(r => r.user_id);
      for (let d = 0; d < days; d++) {
        const log_date = faker.date.between('2024-03-01', '2024-04-30').toISOString().slice(0, 10);
        const user_id = faker.random.arrayElement(assignees);
        const hours = faker.random.number({ min: 1, max: 8 });
        const comment = faker.hacker.phrase();
        await pool.query(
          'INSERT INTO task_time_logs (task_id, user_id, log_date, hours, comment) VALUES (?, ?, ?, ?, ?)',
          [taskId, user_id, log_date, hours, comment]
        );
      }
    }

    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –º–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!');
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    console.log(`- –ü—Ä–æ–µ–∫—Ç–æ–≤: ${projects.length}`);
    console.log(`- –ó–∞–¥–∞—á: ${tasks.length}`);
    console.log(`- –ù–∞–∑–Ω–∞—á–µ–Ω–∏–π: ~${tasks.length * 3}`);
    console.log(`- –õ–æ–≥–æ–≤ –≤—Ä–µ–º–µ–Ω–∏: ~${15 * 4}`);
    console.log('\nüîë –¢–µ—Å—Ç–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
    users.slice(0, 5).forEach(u => console.log(`Email: ${u.email}, Password: password123`));

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await pool.end();
  }
};

// –ó–∞–ø—É—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
seedDatabase(); 