const pool = require('./config/db');
const bcrypt = require('bcryptjs');

const seedDatabase = async () => {
  try {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –º–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');

    // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã (—Å–Ω–∞—á–∞–ª–∞ tasks, –ø–æ—Ç–æ–º projects, –ø–æ—Ç–æ–º users)
    await pool.query('DELETE FROM tasks');
    await pool.query('DELETE FROM projects');
    await pool.query('DELETE FROM users');

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const hashedPassword = await bcrypt.hash('password123', 10);
    
    const users = [
      { username: 'admin', email: 'admin@example.com', password: hashedPassword },
      { username: 'john_doe', email: 'john@example.com', password: hashedPassword },
      { username: 'jane_smith', email: 'jane@example.com', password: hashedPassword },
      { username: 'mike_wilson', email: 'mike@example.com', password: hashedPassword },
      { username: 'sarah_jones', email: 'sarah@example.com', password: hashedPassword }
    ];

    console.log('–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    for (const user of users) {
      await pool.query(
        'INSERT INTO users (username, email, password) VALUES (?, ?, ?)',
        [user.username, user.email, user.password]
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∑–∞–¥–∞—á
    const [userRows] = await pool.query('SELECT id FROM users');
    const userIds = userRows.map(row => row.id);

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
    const projects = [
      { name: '–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ TaskTracker', description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏', created_by: userIds[0] },
      { name: '–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', description: '–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', created_by: userIds[1] },
      { name: 'API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', description: '–ù–∞–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è API', created_by: userIds[2] },
      { name: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã', description: '–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π', created_by: userIds[0] },
      { name: 'UI/UX –¥–∏–∑–∞–π–Ω', description: '–£–ª—É—á—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞', created_by: userIds[3] }
    ];

    console.log('–î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã...');
    for (const project of projects) {
      await pool.query(
        'INSERT INTO projects (name, description, created_by) VALUES (?, ?, ?)',
        [project.name, project.description, project.created_by]
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–µ–∫—Ç–æ–≤
    const [projectRows] = await pool.query('SELECT id FROM projects');
    const projectIds = projectRows.map(row => row.id);

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á
    const tasks = [
      {
        title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
        description: '–°–æ–∑–¥–∞—Ç—å —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ',
        project_id: projectIds[0],
        created_by: userIds[0],
        assigned_to: userIds[1],
        priority: 'high',
        status: 'in_progress',
        due_date: '2024-02-15'
      },
      {
        title: '–°–æ–∑–¥–∞–Ω–∏–µ API endpoints',
        description: '–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ API endpoints –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π',
        project_id: projectIds[0],
        created_by: userIds[0],
        assigned_to: userIds[2],
        priority: 'high',
        status: 'todo',
        due_date: '2024-02-20'
      },
      {
        title: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        description: '–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—Ö–æ–¥–∞',
        project_id: projectIds[0],
        created_by: userIds[0],
        assigned_to: userIds[3],
        priority: 'medium',
        status: 'done',
        due_date: '2024-02-10'
      }
    ];

    console.log('–î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏...');
    for (const task of tasks) {
      await pool.query(
        'INSERT INTO tasks (title, description, project_id, created_by, assigned_to, priority, status, due_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
        [task.title, task.description, task.project_id, task.created_by, task.assigned_to, task.priority, task.status, task.due_date]
      );
    }

    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –º–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!');
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    console.log(`- –ü—Ä–æ–µ–∫—Ç–æ–≤: ${projects.length}`);
    console.log(`- –ó–∞–¥–∞—á: ${tasks.length}`);
    
    console.log('\nüîë –¢–µ—Å—Ç–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
    console.log('Email: admin@example.com, Password: password123');
    console.log('Email: john@example.com, Password: password123');
    console.log('Email: jane@example.com, Password: password123');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await pool.end();
  }
};

// –ó–∞–ø—É—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
seedDatabase(); 